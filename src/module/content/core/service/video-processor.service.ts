import { VideoAgeRecommendationAdapter } from '@contentModule/core/adapter/video-recommendation.adapter.interface'
import { VideoSummaryGenerationAdapter } from '@contentModule/core/adapter/video-summary-generator.adapter.interface'
import { VideoTranscriptGenerationAdapter } from '@contentModule/core/adapter/video-transcript-generator.adapter.interface'
import { VideoMetadata } from '@contentModule/persistence/entity/video-metadata.entity'
import { Inject, Injectable } from '@nestjs/common'
import { Video } from '@src/module/content/persistence/entity/video.entity'

@Injectable()
export class VideoProcessorService {
  constructor(
    @Inject(VideoSummaryGenerationAdapter)
    private readonly videoSummaryGenerator: VideoSummaryGenerationAdapter,
    @Inject(VideoTranscriptGenerationAdapter)
    private readonly videoTranscriptGenerator: VideoTranscriptGenerationAdapter,
    @Inject(VideoAgeRecommendationAdapter)
    private readonly videoAgeRecommendationAdapter: VideoAgeRecommendationAdapter
  ) {}

  async processMetadataAndModeration(video: Video) {
    const summary = await this.videoSummaryGenerator.generateSummary(video.url)
    const transcript = await this.videoTranscriptGenerator.generateTranscript(
      video.url
    )
    const ageRecommendation =
      await this.videoAgeRecommendationAdapter.getAgeRecommendation(video.url)
    video.metadata = new VideoMetadata({
      autoGeneratedDescription: summary,
      transcript,
      ageRating: ageRecommendation?.ageRating,
      ageRatingExplanation: ageRecommendation?.explanation,
      ageRatingCategories: ageRecommendation?.categories
    })
  }
}
